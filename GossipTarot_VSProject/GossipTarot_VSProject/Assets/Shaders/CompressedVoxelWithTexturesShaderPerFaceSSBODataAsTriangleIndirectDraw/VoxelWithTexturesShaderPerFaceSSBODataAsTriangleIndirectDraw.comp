
#version 460 core

layout (local_size_x = 64) in;

struct FaceVoxelsDataPoolMetadata {

	uint voxelDataBucketIndex;
	uint voxelDataBucketOffsetIntoMegaArray;
	uint numVoxelDataInBucket;
};

struct ChunkVoxelsDataPoolMetadata {

	uint packedChunkIndex;

	FaceVoxelsDataPoolMetadata topFaceVoxelsDataPoolMetadata;
	FaceVoxelsDataPoolMetadata bottomFaceVoxelsDataPoolMetadata;
	FaceVoxelsDataPoolMetadata leftFaceVoxelsDataPoolMetadata;
	FaceVoxelsDataPoolMetadata rightFaceVoxelsDataPoolMetadata;
	FaceVoxelsDataPoolMetadata frontFaceVoxelsDataPoolMetadata;
	FaceVoxelsDataPoolMetadata backFaceVoxelsDataPoolMetadata;
};

struct DrawElementsIndirectCommand {
    uint  count;
    uint  instanceCount;
    uint  firstIndex;
    int   baseVertex;
    uint  baseInstance;
};

layout (binding = 3, std430) buffer ChunkVoxelsDataPoolMetadatas {
	ChunkVoxelsDataPoolMetadata chunksVoxelsDataPoolMetadatas[];
};


layout (binding = 4, std430) buffer ChunksDrawElementsIndirectCommands {
	DrawElementsIndirectCommand chunksDrawElementsIndirectCommands[];
};

layout(std430, binding = 5) buffer MultiDrawIndirectDrawCount {
    uint drawCount;
};

uniform vec3 cameraPointingDirectionNormalised;

void WriteFaceDataToDrawCommand(in uint packedChunkIndex, inout FaceVoxelsDataPoolMetadata faceVoxelsDataPoolMetadata){

	uint currentChunkIndirectDrawIndex = atomicAdd(drawCount, 1);

	chunksDrawElementsIndirectCommands[currentChunkIndirectDrawIndex].count = faceVoxelsDataPoolMetadata.numVoxelDataInBucket;
	chunksDrawElementsIndirectCommands[currentChunkIndirectDrawIndex].instanceCount = 1;
	chunksDrawElementsIndirectCommands[currentChunkIndirectDrawIndex].firstIndex = 0;
	chunksDrawElementsIndirectCommands[currentChunkIndirectDrawIndex].baseVertex = int(faceVoxelsDataPoolMetadata.voxelDataBucketOffsetIntoMegaArray);
	chunksDrawElementsIndirectCommands[currentChunkIndirectDrawIndex].baseInstance = packedChunkIndex;
}

void main(void) {

	if (gl_GlobalInvocationID.x == 0 &&
		gl_GlobalInvocationID.y == 0 &&
		gl_GlobalInvocationID.z == 0) 
	{
		drawCount = 0;
	}

	float topFaceDot = dot(vec3(0, 1, 0), cameraPointingDirectionNormalised);
	float bottomFaceDot = dot(vec3(0, -1, 0), cameraPointingDirectionNormalised);
	float leftFaceDot = dot(vec3(-1, 0, 0), cameraPointingDirectionNormalised);
	float rightFaceDot = dot(vec3(1, 0, 0), cameraPointingDirectionNormalised);
	float frontFaceDot = dot(vec3(0, 0, 1), cameraPointingDirectionNormalised);
	float backFaceDot = dot(vec3(0, 0, -1), cameraPointingDirectionNormalised);

	uint currentChunkIndex = gl_GlobalInvocationID.x;

	if (topFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].topFaceVoxelsDataPoolMetadata);
	}
	if (bottomFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].bottomFaceVoxelsDataPoolMetadata);
	}
	if (leftFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].leftFaceVoxelsDataPoolMetadata);
	}
	if (rightFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].rightFaceVoxelsDataPoolMetadata);
	}
	if (frontFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].frontFaceVoxelsDataPoolMetadata);
	}
	if (backFaceDot <= 0.0f) {
		WriteFaceDataToDrawCommand(chunksVoxelsDataPoolMetadatas[currentChunkIndex].packedChunkIndex, chunksVoxelsDataPoolMetadatas[currentChunkIndex].backFaceVoxelsDataPoolMetadata);
	}
}

